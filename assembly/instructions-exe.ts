import {
  branch_eq,
  branch_eq_imm,
  branch_ge_s,
  branch_ge_s_imm,
  branch_ge_u,
  branch_ge_u_imm,
  branch_gt_s_imm,
  branch_gt_u_imm,
  branch_le_s_imm,
  branch_le_u_imm,
  branch_lt_s,
  branch_lt_s_imm,
  branch_lt_u,
  branch_lt_u_imm,
  branch_ne,
  branch_ne_imm,
} from "./instructions/branch";
import { jump, jump_ind, load_imm_jump, load_imm_jump_ind } from "./instructions/jump";
import {
  load_i8,
  load_i16,
  load_i32,
  load_imm,
  load_imm_64,
  load_ind_i8,
  load_ind_i16,
  load_ind_i32,
  load_ind_u8,
  load_ind_u16,
  load_ind_u32,
  load_ind_u64,
  load_u8,
  load_u16,
  load_u32,
  load_u64,
} from "./instructions/load";
import {
  and,
  and_imm,
  or,
  or_imm,
  shar_r,
  shar_r_32,
  shar_r_imm,
  shar_r_imm_32,
  shar_r_imm_alt,
  shar_r_imm_alt_32,
  shlo_l,
  shlo_l_32,
  shlo_l_imm,
  shlo_l_imm_32,
  shlo_l_imm_alt,
  shlo_l_imm_alt_32,
  shlo_r,
  shlo_r_32,
  shlo_r_imm,
  shlo_r_imm_32,
  shlo_r_imm_alt,
  shlo_r_imm_alt_32,
  xor,
  xor_imm,
} from "./instructions/logic";
import {
  add_32,
  add_64,
  add_imm,
  add_imm_32,
  div_s,
  div_s_32,
  div_u,
  div_u_32,
  mul,
  mul_imm,
  mul_imm_32,
  mul_upper_s_s,
  mul_upper_s_u,
  mul_upper_u_u,
  neg_add_imm,
  neg_add_imm_32,
  rem_s,
  rem_s_32,
  rem_u,
  rem_u_32,
  sub,
  sub_32,
} from "./instructions/math";
import { INVALID, ecalli, fallthrough, sbrk, trap } from "./instructions/misc";
import { cmov_iz, cmov_iz_imm, cmov_nz, cmov_nz_imm, move_reg } from "./instructions/mov";
import { InstructionRun } from "./instructions/outcome";
import { set_gt_s_imm, set_gt_u_imm, set_lt_s, set_lt_s_imm, set_lt_u, set_lt_u_imm } from "./instructions/set";
import {
  store_imm_ind_u8,
  store_imm_ind_u16,
  store_imm_ind_u32,
  store_imm_ind_u64,
  store_imm_u8,
  store_imm_u16,
  store_imm_u32,
  store_imm_u64,
  store_ind_u8,
  store_ind_u16,
  store_ind_u32,
  store_ind_u64,
  store_u8,
  store_u16,
  store_u32,
  store_u64,
} from "./instructions/store";

export const RUN: InstructionRun[] = [
  // 0
  trap,
  fallthrough,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 10
  ecalli,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 20
  load_imm_64,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 30
  store_imm_u8,
  store_imm_u16,
  store_imm_u32,
  store_imm_u64,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 40
  jump,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 50
  jump_ind,
  load_imm,
  load_u8,
  load_i8,
  load_u16,
  load_i16,
  load_u32,
  load_i32,
  load_u64,
  store_u8,

  // 60
  store_u16,
  store_u32,
  store_u64,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 70
  store_imm_ind_u8,
  store_imm_ind_u16,
  store_imm_ind_u32,
  store_imm_ind_u64,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 80
  load_imm_jump,
  branch_eq_imm,
  branch_ne_imm,
  branch_lt_u_imm,
  branch_le_u_imm,
  branch_ge_u_imm,
  branch_gt_u_imm,
  branch_lt_s_imm,
  branch_le_s_imm,
  branch_ge_s_imm,

  // 90
  branch_gt_s_imm,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 100
  move_reg,
  sbrk,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 110
  store_ind_u8,
  store_ind_u16,
  store_ind_u32,
  store_ind_u64,
  load_ind_u8,
  load_ind_i8,
  load_ind_u16,
  load_ind_i16,
  load_ind_u32,
  load_ind_i32,

  // 120
  load_ind_u64,
  add_imm_32,
  and_imm,
  xor_imm,
  or_imm,
  mul_imm_32,
  set_lt_u_imm,
  set_lt_s_imm,
  shlo_l_imm_32,
  shlo_r_imm_32,

  // 130
  shar_r_imm_32,
  neg_add_imm_32,
  set_gt_u_imm,
  set_gt_s_imm,
  shlo_l_imm_alt_32,
  shlo_r_imm_alt_32,
  shar_r_imm_alt_32,
  cmov_iz_imm,
  cmov_nz_imm,
  add_imm,

  // 140
  mul_imm,
  shlo_l_imm,
  shlo_r_imm,
  shar_r_imm,
  neg_add_imm,
  shlo_l_imm_alt,
  shlo_r_imm_alt,
  shar_r_imm_alt,
  INVALID,
  INVALID,

  // 150
  branch_eq,
  branch_ne,
  branch_lt_u,
  branch_lt_s,
  branch_ge_u,
  branch_ge_s,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 160
  load_imm_jump_ind,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,
  INVALID,

  // 170
  add_32,
  sub_32,
  div_u_32,
  div_s_32,
  rem_u_32,
  rem_s_32,
  shlo_l_32,
  shlo_r_32,
  shar_r_32,

  // 180
  add_64,
  sub,
  mul,
  div_u,
  div_s,
  rem_u,
  rem_s,
  shlo_l,
  shlo_r,
  shar_r,

  // 190
  and,
  xor,
  or,
  mul_upper_s_s,
  mul_upper_u_u,
  mul_upper_s_u,
  set_lt_u,
  set_lt_s,
  cmov_iz,
  cmov_nz,
];
